spring:
  application:
    name: next-gateway
  data:
    redis:
      port: 6379
      host: 127.0.0.1
  cloud:
    gateway:
      routes:
        - id: auth_route
          uri: lb://next-user-service
          predicates:
            - Path=/auth/**
            - Method=POST,GET
          filters:
            - name: CircuitBreaker
              args:
                name: authCircuitBreaker
                fallbackUri: forward:/fallback/authFailure
                statusCodes:
                  - 500

        - id: file_route
          uri: lb://next-file-manage-service
          predicates:
            - Path=/files/**
            - Method=POST,GET
          filters:
            - AuthenticationFilter
            - RewritePath=/files/(?<segment>.*),/$\{segment}

        - id: graphql_route
          uri: lb://next-graphql
          predicates:
            - Path=/graphql
            - Method=POST,GET
          filters:
            - AuthenticationFilter

      global-cors:
        cors-configurations:
          '[/**]':
            allowedOrigins: "http://localhost:9090,http://local.next-campus.com"
            allowedMethods:
              - POST
              - GET
              - PATCH
            allowedHeaders:
              - "*"
            allowCredentials: true

      default-filters:
        - DedupeResponseHeader=Access-Control-Allow-Origin Access-Control-Allow-Credentials
        - name: RequestRateLimiter
          args:
            redis-rate-limiter.replenishRate: 1 # replenishRate는 사용자가 일정 시간 동안(보통 초 단위) 발생시킬 수 있는 요청의 수를 정의
            redis-rate-limiter.burstCapacity: 5 # burstCapacity는 토큰 버킷이 담을 수 있는 최대 토큰의 수를 정의
            key-resolver: "#{@ipKeyResolver}"
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8000/eureka/
    registerWithEureka: true
    fetchRegistry: true

    rest-template-timeout:
      connect-timeout: 5000
      connect-request-timeout: 8000
      socket-timeout: 10000

logging:
  level:
    org.springframework.cloud.gateway: TRACE
    org.springframework.http.server.reactive: DEBUG
    org.springframework.web.reactive: DEBUG
    reactor.ipc.netty: DEBUG
    reactor.netty: DEBUG
    io.github.resilience4j: DEBUG

resilience4j.timelimiter:
  configs:
    default:
      timeoutDuration: 5s

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    shutdown:
      enabled: true
    health:
      show-details: always # actuator에서 디테일한 정보들을 확인하기 위해 설정

server:
  port: 9000