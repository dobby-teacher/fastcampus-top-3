type Query {
    # 사용자 정보를 ID를 통해 조회합니다.
    getUser(id: ID!): User
    # 사용자 정보를 email을 통해 조회합니다.
    getUserByEmail(email: String!): User

    # 모든 강의를 조회합니다.
    listCourses: [Course]
    # 특정 강의 정보를 course ID를 통해 조회합니다.
    getCourse(courseId: ID!): Course
    # 특정 강의의 모든 세션을 조회합니다.
    listCourseSessions(courseId: ID!): [CourseSession]
    # 특정 세션의 모든 파일을 조회합니다.
    getCourseSessionFiles(courseSessionId: ID!): [CourseSessionFile]

    # 특정 재생 기록을 ID를 통해 조회합니다.
    getPlaybackRecord(id: ID!): PlaybackRecord
    # 특정 재생 기록에 해당하는 모든 이벤트 로그를 조회합니다.
    listEventLogs(recordId: ID!): [EventLog]

    # 특정 사용자의 모든 구독 정보를 조회합니다.
    getUserPlanSubscriptions(userId: ID!): [PlanSubscription]
    # 특정 사용자의 모든 등록 정보를 조회합니다.
    getUserEnrollments(userId: ID!): [Enrollment]
}

type Mutation {
    # 새로운 사용자를 생성합니다.
    createUser(name: String!, email: String!, password: String!): User
    # 기존 사용자 정보를 업데이트합니다.
    updateUser(id: ID!, name: String, email: String): User

    # 새로운 강의를 생성합니다.
    createCourse(title: String!, description: String, instructorId: ID!): Course
    # 기존 강의 정보를 업데이트합니다.
    updateCourse(id: ID!, title: String, description: String): Course
    # 강의에 새로운 세션을 추가합니다.
    addCourseSession(courseId: ID!, title: String!): CourseSession
    # 강의에 대한 평가를 추가합니다.
    rateCourse(userId: ID!, courseId: ID!, rating: Int!, comment: String): CourseRating

    # 재생 기록을 생성합니다.
    recordPlayback(userId: ID!, fileId: ID!, startTime: String!, endTime: String): PlaybackRecord
    # 이벤트를 로깅합니다.
    logEvent(recordId: ID!, userId: ID!, eventType: String!, timestamp: String!): EventLog

    # 새 결제 정보를 생성합니다.
    createPayment(userId: ID!, amount: Float!, paymentType: PaymentType!, paymentMethod: String!): Payment
}

type User {
    id: ID!
    name: String!
    email: String!
    createdAt: String
    updatedAt: String
    loginHistories: [UserLoginHistory]  # 사용자의 로그인 기록을 조회합니다.
}

type UserLoginHistory {
    id: ID!
    userId: ID!
    loginTime: String                  # 로그인 시간
    ipAddress: String                  # 로그인한 IP 주소
}

type Course {
    id: ID!
    title: String!
    description: String
    instructorId: ID!
    instructor: User
    createdAt: String
    courseSessions: [CourseSession]                # 강의에 속한 모든 세션
    ratings: [CourseRating]            # 강의에 대한 사용자 평가
}

type CourseSession {
    id: ID!
    courseId: ID!
    course: Course
    title: String!
    files: [CourseSessionFile]               # 세션에 연결된 모든 파일
}

type CourseRating {
    id: ID!
    courseId: ID!
    course: Course
    userId: ID!
    user: User
    rating: Int!
    comment: String
    createdAt: String
}

type CourseSessionFile {
    fileId: ID!
    courseSessionId: ID!
    courseSession: CourseSession!
    fileName: String!
    fileType: String!
    filePath: String!
}

type PlaybackRecord {
    recordId: ID!
    userId: ID!
    user: User
    fileId: ID!
    startTime: String!
    endTime: String
}

type EventLog {
    eventId: ID!
    recordId: ID!
    playbackRecord: PlaybackRecord
    userId: ID!
    user: User
    eventType: String!
    timestamp: String!
}

enum PaymentType {
    COURSE
    SUBSCRIPTION
}

# 결제 정보를 나타내는 타입입니다.
type Payment {
    id: ID!
    userId: ID!
    user: User!
    paymentType: PaymentType!
    amount: Float!
    paymentMethod: String!
    paymentDate: String!
}

# 강의 등록 정보를 나타내는 타입입니다.
type Enrollment {
    id: ID!
    userId: ID!
    user: User!
    courseId: ID!
    course: Course!
    paymentId: ID!
    payment: Payment!
    registrationDate: String!
}

# 사용자 구독 정보를 나타내는 타입입니다.
type PlanSubscription {
    id: ID!
    userId: ID!
    user: User!
    paymentId: ID!
    payment: Payment!
    startDate: String!
    endDate: String!
}
