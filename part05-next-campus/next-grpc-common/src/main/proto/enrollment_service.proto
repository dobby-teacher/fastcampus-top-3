syntax = "proto3";

package com.fastcampus.nextenrollmentservice.domain.service;

service EnrollmentService {
  // RegisterCourse는 새로운 강의 등록 요청을 처리합니다.
  rpc RegisterCourse(CourseRegistrationRequest) returns (CourseRegistrationResponse);

  // ManageSubscription는 사용자의 새로운 구독을 등록하는 요청을 처리합니다.
  rpc ManageSubscription(SubscriptionRequest) returns (SubscriptionResponse);

  // RenewSubscription은 기존 구독을 갱신하는 요청을 처리합니다.
  rpc RenewSubscription(RenewSubscriptionRequest) returns (SubscriptionResponse);

  // CheckCourseAccess는 특정 사용자가 특정 강의에 접근할 수 있는지 확인합니다.
  rpc CheckCourseAccess(CourseAccessRequest) returns (CourseAccessResponse);

  // CheckSubscriptionAccess는 특정 사용자가 특정 구독에 접근할 수 있는지 확인합니다.
  rpc CheckSubscriptionAccess(SubscriptionAccessRequest) returns (SubscriptionAccessResponse);
}

service FakePaymentService {
  // CreatePayment는 결제 거래 생성을 시뮬레이션합니다.
  rpc CreatePayment(PaymentRequest) returns (PaymentResponse);
  rpc ListUserPayments(UserPaymentsRequest) returns (UserPaymentsResponse);
}

// Requests and responses for the EnrollmentService
message CourseRegistrationRequest {
  int64 user_id = 1;
  int64 course_id = 2;
  int64 payment_id = 3;
}

message CourseRegistrationResponse {
  int64 course_id = 1;
  int64 user_id = 2;
  int64 registration_date = 3; // Unix timestamp
}

message SubscriptionRequest {
  int64 user_id = 1;
  int64 start_date = 2; // Unix timestamp
  int64 end_date = 3; // Unix timestamp
  int64 payment_id = 4;
}

message RenewSubscriptionRequest {
  int64 subscription_id = 1;
  int64 start_date = 2; // Unix timestamp
  int64 end_date = 3; // Unix timestamp
}

message SubscriptionResponse {
  int64 subscription_id = 1;
  int64 user_id = 2;
  int64 start_date = 3; // Unix timestamp
  int64 end_date = 4; // Unix timestamp
}

message CourseAccessRequest {
  int64 course_id = 1;
  int64 user_id = 2;
}

message CourseAccessResponse {
  int64 course_id = 1;
  bool has_access = 2;
}

message SubscriptionAccessRequest {
  int64 user_id = 1;
}

message SubscriptionAccessResponse {
  int64 subscription_id = 1;
  bool has_access = 2;
}

// Requests and responses for the FakePaymentService
message PaymentRequest {
  int64 user_id = 1;
  string type = 2; // "COURSE" or "SUBSCRIPTION"
  double amount = 3;
  string payment_method = 4; // E.g., "CARD"
}

message PaymentResponse {
  int64 user_id = 1;
  string type = 2;
  double amount = 3;
  string payment_method = 4;
  int64 payment_id = 5;
  int64 payment_date = 6;

  bool payment_successful = 100;
}

message UserPaymentsRequest {
  int64 user_id = 1;
}

message UserPaymentsResponse {
  repeated PaymentResponse payments = 1;
}